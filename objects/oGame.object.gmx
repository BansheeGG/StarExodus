<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ScreenWidth = display_get_width()
ScreenHeight = display_get_height()



view_wview = ScreenWidth
view_hview = ScreenHeight

view_wport = view_wview / 2
view_hport = view_hview / 2

surface_resize(application_surface,ScreenWidth,ScreenHeight)

if window_get_width() &gt; ScreenWidth or window_get_height() &gt; ScreenHeight {
    window_set_size(ScreenWidth - 50,ScreenHeight - 50)
    window_set_position(0,0)
}

audio_stop_sound(sound0)
audio_stop_sound(sCometHalley)
audio_stop_sound(sInTime)

randomize()
sound_volume(sound0,0.25)
sound_volume(sCometHalley,0.25)
sound_volume(sInTime,0.25)
Song = audio_play_sound(choose(sound0,sCometHalley,sInTime),1,false)
audio_stop_sound(a45Messier)



SectorCount = 0
SectorXCount = 0
SectorYCount = 0
SectorTotal = 0




PlanetAmount = 0
/*repeat(45) {
    instance_create(random_range(35,room_width -35),random_range(35,room_height - 35),oPlanet)
    PlanetAmount += 1
}*/
StarAmount = 0
/*repeat(150) {
    instance_create(random_range(25,room_width - 25),random_range(25,room_height - 25),oStar)
    StarAmount += 1
}*/

SectorWidth = room_width / 15
SectorHeight = room_height / 15

Sector[SectorCount,0] = SectorXCount
Sector[SectorCount,1] = SectorYCount
SectorYCount += SectorHeight
 
SectorList = ds_list_create()

repeat(15*15) {
    SectorCount += 1
    SectorTotal += 1
    if SectorTotal = 15 {
        SectorYCount += SectorHeight
        SectorXCount = 0 + SectorWidth
        SectorTotal = 0
    } else {
        SectorXCount += SectorWidth
    }
    
/* 
First argument = The sector it selects
Second argument = checks either the x or y coordinate depending on the number (0 or 1)

*/
    Sector[SectorCount,0] = SectorXCount
    Sector[SectorCount,1] = SectorYCount
    
    ds_list_add(SectorList,SectorCount)
    
}
SectorTotal = 0


ds_list_shuffle(SectorList)
CurrentRead = 0

ChosenStar = 0
StarName = ds_list_create()
ds_list_add(StarName,"Andromeda","Orion","Celeste","Aurora","Portia","Gavin","Brian","Bryan","Morgan","Saku","Slav","Salt","EMC","Kjtt","Vansler","Bozzen","Joar","Namisian","Arnustus","Melonus","Blimian","Rob","Alex","Ark","Lautaniar","Somerandomplanet")
ds_list_shuffle(StarName)

ChosenPlanet = 0
PlanetName = ds_list_create()
ds_list_add(PlanetName,"Earth 2","Planet B-ball","Gnarth","Jay","Gavin","Mars 3","Nova Scientia","Conscientia","Planet Mc Planet")
ds_list_shuffle(PlanetName)



repeat(SectorCount) {
    CurrentSectorX = Sector[SectorTotal,0]
    CurrentSectorY = Sector[SectorTotal,1]
    SectorTotal += 1
    repeat(5) {
        ChosenStar = ds_list_find_value(StarName,0) 
        NewStar = instance_create(random_range(CurrentSectorX - SectorWidth,CurrentSectorX),random_range(CurrentSectorY - SectorHeight,CurrentSectorY),oStar)
        StarAmount += 1
        ds_list_shuffle(StarName)
    }
}

repeat(45) {
    PlanetAmount += 1
    PlanetSector = ds_list_find_value(SectorList,CurrentRead)
    ChosenPlanet = ds_list_find_value(PlanetName,0)
    if PlanetAmount = 1 {
        HospitableSector = PlanetSector
        HospitablePlanetName = ChosenPlanet
        HospitablePlanet = instance_create(random_range(Sector[PlanetSector,0] - SectorWidth,Sector[PlanetSector,0]),random_range(Sector[PlanetSector,1] - SectorHeight,Sector[PlanetSector,1]),oPlanet)
        ClosestStar = instance_nearest(HospitablePlanet.x,HospitablePlanet.y,oStar)
    } else {
        instance_create(random_range(Sector[PlanetSector,0] - SectorWidth,Sector[PlanetSector,0]),random_range(Sector[PlanetSector,1] - SectorHeight,Sector[PlanetSector,1]),oPlanet)
    }
    ds_list_shuffle(PlanetName)
    CurrentRead += 1
}


ChosenStation = 0
StationName = ds_list_create()
ds_list_add(StationName,"Alpha","Beta","Omega","Delta","Apollo","Chroma","Solution","Enigma","Aberrant","Kuiper","Trilby","Mercury")
ds_list_shuffle(StationName)

Clue1 = 0
Clue2 = 0
Clue3 = 0
Clue4 = 0
Clue5 = 0
Clue6 = 0
Clue7 = 0
Clue8 = 0
Clue9 = 0
Clue10 = 0

StationClue = ds_list_create()
ds_list_add(StationClue,"Friendly reminder for every Satellite AI: Sectors are currently imcrementaly counted, from top left to bottom right." )
ds_list_add(StationClue,"Preliminary scans show little potential for human habitation, however a planet in Sector " + string(HospitableSector) + " Shows great potential.")
ds_list_add(StationClue,"To the stations naming the stars: Please stop, it has no purpose.")
ds_list_add(StationClue,"Fun fact: The closest star to the only habitable planet in this system is named " + string(ClosestStar.ID) + ".")
ds_list_add(StationClue,"There are currently 1125 stars in this system.")
ds_list_add(StationClue,"Supposedly " + string(HospitablePlanetName) + " has all the components required to support a human settlement. How nice.")
ds_list_add(StationClue,"Since the mainframe AI hasn't made a sector triangulation system yet, I have added the current sector to the star names. Just check their IDs and you'll know which sector you are in.")
ds_list_add(StationClue,"AS ANOTHER REMINDER, Star name syntax is Star *star number*, name *Star name*, Sector *The sector the star is in*.")
ds_list_add(StationClue,"Any system clues will be displayed up here. But you probably figured that out by now already.")
ds_list_add(StationClue,"Your clue is in another station.")

ds_list_shuffle(StationClue)

StationCount = 0
StationSector = 0
CurrentRead = 0
SelectedClue = 1
repeat(10) {
    StationCount += 1
    ChosenStation = ds_list_find_value(StationName,CurrentRead)
    StationSector = ds_list_find_value(SectorList,ds_list_size(SectorList)-1-CurrentRead)
    Clue = ds_list_find_value(StationClue,CurrentRead)
    if SelectedClue = 1 {
        Clue1 = Clue
    } else if SelectedClue = 2 {
        Clue2 = Clue
    } else if SelectedClue = 3 {
        Clue3 = Clue
    } else if SelectedClue = 4 {
        Clue4 = Clue
    } else if SelectedClue = 5 {
        Clue5 = Clue
    } else if SelectedClue = 6 {
        Clue6 = Clue
    } else if SelectedClue = 7 {
        Clue7 = Clue
    } else if SelectedClue = 8 {
        Clue8 = Clue
    } else if SelectedClue = 9 {
        Clue9 = Clue
    } else if SelectedClue = 10 {
        Clue10 = Clue
    }
    SelectedClue += 1
    instance_create(random_range(Sector[StationSector,0] - SectorWidth,Sector[StationSector,0]),random_range(Sector[StationSector,1]-SectorHeight,Sector[StationSector,1]),oSpaceStation)
    CurrentRead+=1
}

ds_list_destroy(StationName)
CurrentRead = 0



ds_list_destroy(SectorList)
ds_list_destroy(StarName)
ds_list_destroy(StationClue)
ds_list_destroy(PlanetName)

PlayerSector = random(SectorCount)
oRocket.x = Sector[PlayerSector,0]
oRocket.y = Sector[PlayerSector,1]


MinutesRemaining = 7
SecondsRemaining = 0
MilliSecondsRemaining = 30
FadeOut = false
FadeAlpha = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if keyboard_check_pressed(vk_escape) {
    game_end()
}

if keyboard_check_pressed(ord("R")) {
    game_restart()
}

if !audio_is_playing(Song) {
    Song = audio_play_sound(choose(sound0,sCometHalley,sInTime),1,false)
}

if MinutesRemaining &gt; 0 and SecondsRemaining = 0 {
    MinutesRemaining -= 1
    SecondsRemaining = 59
} else if MilliSecondsRemaining &gt; 0 and SecondsRemaining &gt; 0 {
    MilliSecondsRemaining -= 1
} else if MilliSecondsRemaining = 0 {
    MilliSecondsRemaining = 30
    SecondsRemaining -= 1
} else if MinutesRemaining &lt;= 0 and SecondsRemaining &lt;= 0 {
    FadeOut = true
}

if FadeOut = true {
    if FadeAlpha &gt;= 0 and FadeAlpha &lt; 1 {
        FadeAlpha += 1 / room_speed / 7
        oRocket.MaximumSpeed -= 100 / room_speed / 7
    }   else if FadeAlpha &gt;= 1 {
        audio_stop_sound(sound0)
        audio_stop_sound(sInTime)
        audio_stop_sound(sCometHalley)
        room_goto(rLostPower)
    } 
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(ScreenHeight,0,"Time Remaining: " + string(MinutesRemaining) + "m, " + string(SecondsRemaining) + "s")


if FadeOut = true {
    draw_set_alpha(FadeAlpha)
    draw_rectangle(0,0,room_width,room_height,false)
}

draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
