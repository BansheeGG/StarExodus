<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ScreenWidth = display_get_width()
ScreenHeight = display_get_height()


view_wview[0] = room_width
view_hview[0] = room_height

view_wport[0] = view_wview[0] / 2
view_hport[0] = view_hview[0] / 2

surface_resize(application_surface,room_width,room_height)



repeat(16) {
    instance_create(random(room_width),random(room_height),oMainMenuStar)
}
Counter = 0
CounterMax = random_range(5,10)
audio_play_sound(a45Messier,10,true)


//Screen Bullshit that is also very important
IntroDone = false
Exit = false

SpaceDone = false


FadeDone = false
FadeOut = false
FadeAlpha = 0
MusicVolume = 0.5
audio_sound_gain(a45Messier,MusicVolume,0)
audio_play_sound(a45Messier,10,true)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_escape) {
    game_end()
}

if keyboard_check_pressed(vk_space) and IntroDone = true and SpaceDone = true {
    FadeOut = true
}

if Counter &lt; CounterMax * room_speed {
    Counter += 1
} else if Counter &gt;= CounterMax * room_speed {
    instance_create(random_range(room_width / 2 - 250,room_width / 2 + 250), room_height + 10, oMainMenuRocket)
    Counter = 0
    CounterMax = random_range(5,10)
}
if IntroDone = false {
    if FadeAlpha &gt;= 0 and FadeAlpha &lt; 1 {
        FadeAlpha += 1 / room_speed / 3
    } else if FadeAlpha &gt;= 1 {
        IntroDone = true
        FadeAlpha = 0
    }
}

if IntroDone = true and SpaceDone = false {
    if FadeAlpha &gt;= 0 and FadeAlpha &lt; 1 {
        FadeAlpha += 1 / room_speed / 3
    } else if FadeAlpha &gt;= 1 {
        SpaceDone = true
        FadeAlpha = 0
    }
}

if FadeOut = true and FadeDone = false {
    if FadeAlpha &gt;= 0 and FadeAlpha &lt; 1 {
        FadeAlpha += 1 / room_speed
        MusicVolume -= 0.5 / room_speed
        audio_sound_gain(a45Messier,MusicVolume,0)
    }   else if FadeAlpha &gt;= 1 {
        audio_stop_sound(a45Messier)
        Exit = true
        FadeDone = true
    } 
}

audio_sound_gain(a45Messier,MusicVolume,0)

if Exit = true {
    room_goto(rIntro)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center)
draw_set_valign(fa_bottom)
draw_set_colour(c_white)

if IntroDone = false {
    draw_set_alpha(FadeAlpha)
    draw_set_font(TitleFont)
    draw_text(room_width / 2,room_height / 2 - 100,"STAR EXODUS")
    draw_text(room_width / 2, room_height - 75,"A (half assed) game made for the Game Off 2020 Jam")
    draw_text(room_width / 2, room_height - 50,"By Banshee")
} else {
    draw_set_alpha(1)
    draw_set_font(TitleFont)
    draw_text(room_width / 2,room_height / 2 - 100,"STAR EXODUS")
    draw_text(room_width / 2, room_height - 75,"A (half assed) game made for the Game Off 2020 Jam")
    draw_text(room_width / 2, room_height - 50,"By Banshee")
}



if SpaceDone = false and IntroDone = true {
    draw_set_alpha(FadeAlpha)
    draw_set_font(-1)
    draw_text(room_width / 2,room_height / 2,"Press space to begin")
} else if SpaceDone = true and IntroDone = true {
    draw_set_alpha(1)
    draw_set_font(-1)
    draw_text(room_width / 2,room_height / 2,"Press space to begin")
}




if FadeOut = true {
    draw_set_colour(c_black)
    draw_set_alpha(FadeAlpha)
    draw_rectangle(0,0,room_width,room_height,false)
}

if Exit = true {
    draw_set_alpha(0)
    draw_rectangle(0,0,room_width,room_height,false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
